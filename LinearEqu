public string linear(String equation) {
String b = "";
char[] ch = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'o', 'p', 'q', 's', 'u', 'w', 'x' , 'y' , 'z' };
List<char> value= new List<char>()
for(int i=0; i<equation.Length; i++)
{ 
if(ch.Contains(equation[i]))
{
if(value.Contains(equation[i])==false){
value.Add(equation[i]);
} } }
if(value.Count==3)
{ 
b = threevariable(equation);
}
else if (value.Count == 2)
{
b= twovariable(equation);
}
return (b);
} 

public string threevariable(string equation)
{
List<int> v1 = new List<int>();
List<int> v2 = new List<int>();
List<int> v3 = new List<int>();
List<double> res = new List<double>();
string op = "";
string lo = "";
string uo = "";
string man = "";
char[] ch = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'o', 'p', 'q', 's', 'u', 'w', 'x', 'y', 'z'};
List<char> value = new List<char>();
for (int i = 0; i < equation.Length; i++)
{
if (ch.Contains(equation[i]))
{
if (value.Contains(equation[i]) == false)
{
value.Add(equation[i]);
}}}
string[] one = equation.Split(new String[] {" ", "\n", "\r", "\t" },
StringSplitOptions.RemoveEmptyEntries);
if (one.Length == 0)
{
return ("contain no equation");
}
else
{
for (int i = 0; i < one.Length; i++)
{
string just = one[i].ToString();
string[] spt = just.Split('=');
int integ = Convert.ToInt32(spt[1]);
res.Add(integ);
string[] word = spt[0].Split('+', '-');
string ert = value[0].ToString();
string rty = value[1].ToString();
string ko = value[2].ToString();
for (int j = 0; j < word.Length; j++)
{ 
if (word[j].Contains(ert))
{
string wrd = word[j].ToString();
wrd = wrd.Replace(ert, "");
char[] am = wrd.ToArray();
String[] ws = new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0" };
char[] cc = wrd.ToCharArray();
String wrd1 = "";
for (int r = 0; r < cc.Length;r++)
{
if(ws.Contains(cc[r].ToString()))
{
wrd1 = wrd1 + cc[r];
}}
wrd = wrd1;
if (wrd.Equals(""))
{
v1.Add(1);
}
else
{
int opo = Convert.ToInt32(wrd);
v1.Add(opo);
} }
else if (word[j].Contains(rty))
{
string wrd = word[j].ToString();
wrd = wrd.Replace(rty, "");73
if (wrd.Equals(""))
{
v2.Add(1);
}
else
{
int opo = Convert.ToInt32(wrd);
v2.Add(opo);
} }
else if (word[j].Contains(ko))
{
string zxc = word[j].ToString();
zxc = zxc.Replace(ko, "");
if (zxc.Equals(""))
{
v3.Add(1);
}
else
{
int opo = Convert.ToInt32(zxc);
v3.Add(opo);
} }
else
}
}
for (int f = 0; f < one.Length; f++)
{
string m = one[f];
string val1 = value[0].ToString();
string val2 = value[1].ToString();
string val3 = value[2].ToString();
string coef1 = v1[f].ToString();
string coef2 = v2[f].ToString();
string coef3 = v3[f].ToString();
string a = coef1 + val1;
if (coef1.Trim() == "1")
{ 
a = val1;
}
string[] a1 = m.Split(new string[] { a }, StringSplitOptions.RemoveEmptyEntries);
if (a1.Length == 1)
{ }
else if (a1.Length > 1)
{
string er = a1[0].ToString();
string bc = er.Substring(er.Length - 1);
if (bc == "-")
{
v1[f] = v1[f] * -1;
} }
string b = coef2 + val2;
if (coef2.Trim() == "1")
{
a = val1;
}
string[] b1 = m.Split(new string[] { b }, StringSplitOptions.RemoveEmptyEntries);
if (b1.Length == 1)
{ }
else if (b1.Length > 1)
{
string we = b1[0].ToString();
string vb = we.Substring(we.Length - 1);
if (vb == "-")
{
v2[f] = v2[f] * -1;
} }
string c = coef3 + val3;
if (coef3.Trim() == "1")
{
c = val3;
}
string[] c1 = m.Split(new string[] { c }, StringSplitOptions.RemoveEmptyEntries);76
if (c1.Length == 1)
{ }
else if (c1.Length > 1)
{
string er = c1[0].ToString();
string bc = er.Substring(er.Length - 1);
if (bc == "-")
{
v3[f] = v3[f] * -1;
} } }
if(v1.Count==3 && v2.Count==3 && v3.Count==3 && res.Count==3)
{
varacd=MathNet.Numerics.LinearAlgebra.Matrix<double>.Build.DenseOfArray(ne
w double[,] { { v1[0], v2[0], v3[0] }, { v1[1], v2[1], v3[1] }, { v1[2], v2[2], v3[2] }
});
string oq = "\n" + v1[0] + " " + v2[0] + " " + v3[0] + " " + res[0] + "\n" + v1[1] + " "
+ v2[1] + " " + v3[1] + " " + res[1] + "\n" + v1[2] + " " + v2[2] + " " + v3[2] + " " +
res[2] + "\n";
var abc = Vector<double>.Build.Dense(res.ToArray());
var qwe = acd.Solve(abc);
return "results are " +value[0]+ ":" +qwe[0]+ "," +value[1]+ ":" +qwe[1]+
"," +value[2]+ ":" +qwe[2];
}
else
{
return "error";
} }
op = op + "|" +v1[0] + v1[1] + v1[2] + "|"+ Environment.NewLine;
op = op + "|" + v2[0] + v2[1] + v2[2] +"|"+ Environment.NewLine;
op = op + "|" + v3[0] + v3[1] + v3[2] +"|"+ Environment.NewLine;
lo = lo + "|" +value[0] +"|"+ Environment.NewLine;
lo = lo+"|" + value[1] +"|"+ Environment.NewLine;
lo = lo +"|" +value[2] +"|"+ Environment.NewLine;
uo = uo + "|" + res[0] + "|" + Environment.NewLine;
uo = uo + "|" + res[1] + "|" + Environment.NewLine;
uo = uo + "|" + res[2] + "|" + Environment.NewLine;
man = op + System.Environment.NewLine + System.Environment.NewLine + lo +
System.Environment.NewLine +System.Environment.NewLine+ uo+
System.Environment.NewLine+System.Environment.NewLine+ "$" + op + "$ " +
"$" + lo + "$" + "=" + "$" + uo + "$" + Environment.NewLine;
return (man);
}
